AWSTemplateFormatVersion: 2010-09-09
Description: Cloud Formation template for CloudX_Associate_AWS_Developer program stack
Parameters:
  ImageId:
    Type: String
    Description: Amazon Linux 2 Kernel 5.10 AMI 2.0.20230504.1 x86_64 HVM gp2
    Default: ami-06a0cd9728546d178
  InstanceType:
    Type: String
    Default: t2.micro
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  DBUsername:
    Type: String
    Description: The username for the RDS database.
    Default: masteruser
    MinLength: 1
    MaxLength: 16
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    Type: String
    Description: The password for the RDS database.
    Default: masterpassword
    MinLength: 8
    MaxLength: 41
    NoEcho: true
    ConstraintDescription: Must be between 8 and 41 characters long.
  DBName:
    Type: String
    Description: The name of the database to create.
    Default: images
    MinLength: 1
    MaxLength: 64
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
Resources:
  # S3Bucket:
    # Type: 'AWS::S3::Bucket'
    # Properties:
      # BucketName: demobucket-test-for-rds
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true       # Enable DNS resolution
      EnableDnsHostnames: true     # Enable DNS hostnames
      Tags:
        - Key: Name
          Value: demo-vpc
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.11.0/24
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: demo-public-subnet-a
  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.0.12.0/24
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: demo-public-subnet-b
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: demo-internet-gateway
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  SubnetBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: demo-security-group
      GroupDescription: >-
        Security Group for allowing access over HTTP/HTTPS from anywhere and
        allowing SSH connections from your IP address only
      VpcId: !Ref VPC
  SecurityGroupIngressHttp:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0
      GroupId: !Ref SecurityGroup
  SecurityGroupIngressHttps:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0
      GroupId: !Ref SecurityGroup
  SecurityGroupIngressSSH:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref SSHLocation
      GroupId: !Ref SecurityGroup
  LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    # DependsOn: RDSWaitCondition  # Ensure EC2 is created after RDS
    Properties:
      LaunchTemplateName: demo-launch-template
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        ImageId: !Ref ImageId
        KeyName: slava-key-pair
        SecurityGroupIds: ###!!!
          - !Ref SecurityGroup # Associate the EC2 instance with the Security Group
        IamInstanceProfile: 
          Name: EC2_S3_SNS_SQS_FullAccess_Role
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # Update the package manager
            yum update -y
            # Install Apache web server
            yum install java-11-amazon-corretto -y
            # Install Apache web server
            # yum install -y httpd
            # Start the Apache service
            # systemctl start httpd
            # systemctl enable httpd
            # Create a health check endpoint
            # echo "<html><body><h1>Healthy</h1></body></html>" > /var/www/html/health
            
            yum install -y mysql
            echo "MySQL client installed"

            # Create SQL script
            cat <<EOF > /tmp/init.sql
            -- Create the database named 'images'
            CREATE DATABASE IF NOT EXISTS images;

            -- Use the 'images' database
            USE images;
            create table image(
                id				BIGINT			PRIMARY KEY AUTO_INCREMENT,
                name			VARCHAR(20),
                image_size		BIGINT,
                file_extension	VARCHAR(40) ,
                last_update		TIMESTAMP		DEFAULT NOW()
            );
            EOF
            
            # Wait for RDS to be ready
            echo "Waiting for RDS instance to be ready..."
            while ! mysql -h ${MyRDSInstance.Endpoint.Address} -P 3306 -u ${DBUsername} -p${DBPassword} -e "SELECT 1;" > /dev/null 2>&1; do
              sleep 10
            done
            echo "RDS instance is ready."

            # Apply SQL script to the RDS database
            mysql -h ${MyRDSInstance.Endpoint.Address} -P 3306 -u ${DBUsername} -p${DBPassword} ${DBName} < /tmp/init.sql            

            # Set environment variables for SNS and SQS
            # export SNS_TOPIC_ARN="${SlavaUploadsNotificationTopic.TopicArn}"
            # export SQS_QUEUE_URL="${SlavaUploadsNotificationQueue}"

            # Write environment variables to a file for the Java app
            # echo "SNS_TOPIC_ARN=${SlavaUploadsNotificationTopic.TopicArn}" >> /etc/environment
            # echo "SQS_QUEUE_URL=${SlavaUploadsNotificationQueue}" >> /etc/environment
            # echo "AWS_REGION=${AWS::Region}" >> /etc/environment

            mkdir /project
            aws s3 cp s3://demobucket-test-for-rds/simple-app.jar /project/
            # Start a process as ec2-user
            # su - ec2-user -c "nohup java -jar /project/simple-app.jar"
            su - ec2-user -c "nohup sudo java -DAWS_BUCKET_NAME=demobucket-test-for-rds -DAWS_BUCKET_REGION=${AWS::Region} -DAWS_DB_HOST=${MyRDSInstance.Endpoint.Address} -DAWS_DB_NAME=images -DAWS_DB_USERNAME=${DBUsername} -DAWS_DB_PASSWORD=${DBPassword} -DAWS_RESOURCES_REGION=${AWS::Region}  -DAWS_SNS_TOPIC_ARN=${SlavaUploadsNotificationTopic.TopicArn} -DAWS_RESOURCES_REGION=${AWS::Region} -DAWS_SQS_QUEUE_URL=${SlavaUploadsNotificationQueue} -Dserver.port=80 -jar /project/simple-app.jar"
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      MinSize: '1'
      MaxSize: '2'
      DesiredCapacity: '1'
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: demo-auto-scaling-group
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      SecurityGroups: ##!!!
        - !Ref SecurityGroup
      Tags:
        - Key: Name
          Value: demo-application-load-balancer
    DependsOn: InternetGateway
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: demo-alb-target-group
          
########################################

  # Security Group for RDS
  MyRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL traffic from EC2
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref SecurityGroup
      Tags:
        - Key: Name
          Value: MyRDSSecurityGroup


  # RDS MySQL Instance
  MyRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.micro
      Engine: MySQL
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      AllocatedStorage: 20
      StorageType: gp2 # General Purpose SSD (Free Tier eligible)
      DBName: !Ref DBName
      VPCSecurityGroups:
        - !Ref MyRDSSecurityGroup
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      BackupRetentionPeriod: 1 # Free Tier allows backups with 1-day retention
      MultiAZ: false # Multi-AZ is not Free Tier eligible
    # CreationPolicy:
      # ResourceSignal:
        # Count: 1
        # Timeout: PT15M # Wait up to 15 minutes for the signal
        
  # RDS Subnet Group
  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      Tags:
        - Key: Name
          Value: MyDBSubnetGroup
          
  # Wait Condition Handle
  # RDSWaitHandle:
    # Type: AWS::CloudFormation::WaitConditionHandle

  # Wait Condition
  # RDSWaitCondition:
    # Type: AWS::CloudFormation::WaitCondition
    # DependsOn: MyRDSInstance
    # Properties:
      # Handle: !Ref RDSWaitHandle
      # Timeout: 300 # Wait up to 15 minutes for the signal
      
  # SQS Queue
  SlavaUploadsNotificationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: Slava-UploadsNotificationQueue
      VisibilityTimeout: 30 # Optional: Visibility timeout in seconds
      Tags:
        - Key: Name
          Value: Slava-UploadsNotificationQueue

  # SNS Topic
  SlavaUploadsNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: Slava-UploadsNotificationTopic
      Tags:
        - Key: Name
          Value: Slava-UploadsNotificationTopic

  # SNS Topic Policy (Optional: To allow SQS to subscribe to the topic)
  SlavaUploadsNotificationTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref SlavaUploadsNotificationTopic
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "SNS:Publish"
            Resource: !GetAtt SlavaUploadsNotificationTopic.TopicArn

  # SQS Subscription to SNS Topic
  SlavaUploadsNotificationSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      TopicArn: !GetAtt SlavaUploadsNotificationTopic.TopicArn
      Endpoint: !GetAtt SlavaUploadsNotificationQueue.Arn